# Docker
# Build a Docker image 
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    #- develop    # disabling trigger for now; need to switch to schedule trigger
    - test
    - releases/*
  paths:
    exclude:
    - deployment/*
    - azure-pipelines.yml

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  imageName: 'pipelines-javascript-docker'
  dockerRegistryServiceConnection: 'docker.io/ezlee'
  imageRepository: 'ezlee/$(imageName)' 
  containerRegistry: 'docker.io/ezlee'
  dockerfilePath: 'app/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build image
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Bash@3
      displayName: show workspace and other environment variables
      inputs:
        targetType: 'inline'
        script: 'env | sort'
    - task: Bash@3
      displayName: list files
      inputs:
        targetType: 'inline'
        script: 'whoami; pwd ; ls -alh'
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: CmdLine@2
      displayName: tag the new build with latest tag
      inputs:
        script: 'docker tag $(imageRepository):$(tag) $(imageRepository):latest'
    - task: Docker@2
      displayName: push the latest tag
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        command: 'push'
        tags: 'latest'
    - task: Bash@3
      displayName: debug - check file contents on build agent
      inputs:
        targetType: 'inline'
        script: 'pwd; echo $BUILD_SOURCEDIRECTORY; echo $BUILD_ARTIFACTSTAGINGDIRECTORY; ls -al $BUILD_SOURCEDIRECTORY'
    - task: CopyFiles@2
      inputs:
        contents: $(build.sourcesDirectory)/deployment/*.yml
        targetFolder: $(build.artifactStagingDirectory)
    - task: Bash@3
      displayName: check copy destination folders
      inputs:
       targetType: 'inline'
       script: 'ls -al $BUILD_ARTIFACTSTAGINGDIRECTORY; cat $BUILD_ARTIFACTSTAGINGDIRECTORY/deployment.yml'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: $(build.artifactStagingDirectory)
        artifactName: deploy_artifacts

- stage: deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:  
  - job: show_environment
    displayName: show the environemnt variables
    pool: Default
    steps:
    - task: CmdLine@2
      displayName: show workspace and other environment variables
      inputs:
        script: 'set | sort'
    - task: CmdLine@2
      displayName: list files
      inputs:
        script: 'echo %CD% & dir /S & echo BUILD_ARTIFACTSTAGINGDIRECTORY & echo %BUILD_ARTIFACTSTAGINGDIRECTORY% & dir %BUILD_ARTIFACTSTAGINGDIRECTORY%'
    - task: DownloadPipelineArtifact@2
      inputs:
          source: 'current'
          #project: # Required when source == Specific
          #pipeline: # Required when source == Specific
          preferTriggeringPipeline: false # Optional
          #runVersion: 'latest' # Required when source == Specific# Options: latest, latestFromBranch, specific
          #runBranch: 'refs/heads/master' # Required when source == Specific && RunVersion == LatestFromBranch
          #runId: # Required when source == Specific && RunVersion == Specific
          #tags: # Optional
          artifact: deploy_artifacts
          #patterns: '**' # Optional
          path: '$(Pipeline.Workspace)'  
  - deployment: deploy_2_minikube
    variables:
    - name: kub-pod-instancecount
      value: 1
    - name: appName
      value: pipeline-nodejs-app
    - name: svcName
      value: pipeline-nodejs-svc
    pool: default
    environment: 'minikube'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: Replace tokens in **/*
            inputs:
              rootDirectory: $(Pipeline.Workspace)
              targetFiles: 'deployment.yml'
              keepToken: true
              tokenPrefix: __
              tokenSuffix: __
          - task: Kubernetes@1
            displayName: kubectl apply
            inputs:
              kubernetesServiceEndpoint: 'minikube-laptop'
              namespace: default
              secretName: regcred
              kubernetesCluster: minikube
              command: apply
              arguments: -f $(Pipeline.Workspace)\deployment.yml